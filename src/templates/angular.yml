use:
  - 'logic'
  - 'prompt'
  - 'write'
  - 'log'

log:
  warning:
    - "This doesn't install angular, you have to install it manually."
  info:
    - "After creation of the files, run the install.sh file to install the dependencies"

prompt:
  'Do you want routing? {{y/N}}':
    'routing'
if:
  "'${{routing}}' === 'y'":
    create:
      - ${{name}}/src/app/app-routing.module.ts

create:
  #create root files
  - ${{name}}/.editorconfig
  - ${{name}}/.gitignore
  - ${{name}}/README.md
  - ${{name}}/angular.json
  - ${{name}}/install.sh
  #- ${{name}}/package.json
  - ${{name}}/src/
  - ${{name}}/tsconfig.json
  - ${{name}}/tslint.json
  - ${{name}}/browserslist
  - ${{name}}/karma.conf.js
  - ${{name}}/tsconfig.spec.json
  - ${{name}}/tsconfig.app.json

  #src
  - ${{name}}/src/assets/.gitkeep
  - ${{name}}/src/environments/
  - ${{name}}/src/environments/environment.prod.ts
  - ${{name}}/src/environments/environment.ts
  - ${{name}}/src/index.html
  - ${{name}}/src/main.ts
  - ${{name}}/src/polyfills.ts
  - ${{name}}/src/styles.sass
  - ${{name}}/src/test.ts
  #components
  
  - ${{name}}/src/app/app.component.ts
  - ${{name}}/src/app/app.component.html
  - ${{name}}/src/app/app.component.sass
  - ${{name}}/src/app/app.component.spec.ts
  - ${{name}}/src/app/app.module.ts
  #e2e
  - ${{name}}/e2e/src/
  - ${{name}}/e2e/src/app.e2e-spec.ts
  - ${{name}}/e2e/src/app.po.ts
  - ${{name}}/e2e/protractor.conf.js
  - ${{name}}/e2e/tsconfig.json
write:
  '${{name}}/karma.conf.js': |
    // Karma configuration file, see link for more information
    // https://karma-runner.github.io/1.0/config/configuration-file.html

    module.exports = function {{config}} {
      config.set{{{
        basePath: '',
        frameworks: ['jasmine', '@angular-devkit/build-angular'],
        plugins: [
          require{{'karma-jasmine'}},
          require{{'karma-chrome-launcher'}},
          require{{'karma-jasmine-html-reporter'}},
          require{{'karma-coverage-istanbul-reporter'}},
          require{{'@angular-devkit/build-angular/plugins/karma'}}
        ],
        client: {
          clearContext: false // leave Jasmine Spec Runner output visible in browser
        },
        coverageIstanbulReporter: {
          dir: require{{'path'}}.join{{__dirname, './coverage/testProj'}},
          reports: ['html', 'lcovonly', 'text-summary'],
          fixWebpackSourcePaths: true
        },
        reporters: ['progress', 'kjhtml'],
        port: 9876,
        colors: true,
        logLevel: config.LOG_INFO,
        autoWatch: true,
        browsers: ['Chrome'],
        singleRun: false,
        restartOnFileChange: true
      }}};
    };
  '${{name}}/README.md': | 
    # TestProj

    This project was generated with [Angular CLI]{{https://github.com/angular/angular-cli}} version 9.0.6.

    ## Development server

    Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

    ## Code scaffolding

    Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

    ## Build

    Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.

    ## Running unit tests

    Run `ng test` to execute the unit tests via [Karma]{{https://karma-runner.github.io}}.

    ## Running end-to-end tests

    Run `ng e2e` to execute the end-to-end tests via [Protractor]{{http://www.protractortest.org/}}.

    ## Further help

    To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README]{{https://github.com/angular/angular-cli/blob/master/README.md}}.

  '${{name}}/tsconfig.json': |
    {
      "compileOnSave": false,
      "compilerOptions": {
      "baseUrl": "./",
      "outDir": "./dist/out-tsc",
      "sourceMap": true,
      "declaration": false,
      "downlevelIteration": true,
      "experimentalDecorators": true,
      "module": "esnext",
      "moduleResolution": "node",
      "importHelpers": true,
      "target": "es2015",
      "lib": [
        "es2018",
        "dom"
      ]
    },
    "angularCompilerOptions": {
      "fullTemplateTypeCheck": true,
        "strictInjectionParameters": true
      }
    }
  '${{name}}/.editorconfig': | 
    # Editor configuration, see https://editorconfig.org
    root = true

    [*]
    charset = utf-8
    indent_style = space
    indent_size = 2
    insert_final_newline = true
    trim_trailing_whitespace = true

    [*.md]
    max_line_length = off
    trim_trailing_whitespace = false
  '${{name}}/.gitignore': |
    # See http://help.github.com/ignore-files/ for more about ignoring files.

    # compiled output
    /dist
    /tmp
    /out-tsc
    # Only exists if Bazel was run
    /bazel-out

    # dependencies
    /node_modules

    # profiling files
    chrome-profiler-events*.json
    speed-measure-plugin*.json

    # IDEs and editors
    /.idea
    .project
    .classpath
    .c9/
    *.launch
    .settings/
    *.sublime-workspace

    # IDE - VSCode
    .vscode/*
    !.vscode/settings.json
    !.vscode/tasks.json
    !.vscode/launch.json
    !.vscode/extensions.json
    .history/*

    # misc
    /.sass-cache
    /connect.lock
    /coverage
    /libpeerconnection.log
    npm-debug.log
    yarn-error.log
    testem.log
    /typings

    # System Files
    .DS_Store
    Thumbs.db
  '${{name}}/tsconfig.app.json': |
    {
      "extends": "./tsconfig.json",
      "compilerOptions": {
      "outDir": "./out-tsc/app",
      "types": []
    },
    "files": [
      "src/main.ts",
      "src/polyfills.ts"
      ],
      "include": [
        "src/**/*.d.ts"
      ]
    } 
  '${{name}}/src/test.ts': |
    // This file is required by karma.conf.js and loads recursively all the .spec and framework files

    import 'zone.js/dist/zone-testing';
    import { getTestBed } from '@angular/core/testing';
    import {
      BrowserDynamicTestingModule,
      platformBrowserDynamicTesting
    } from '@angular/platform-browser-dynamic/testing';

    declare const require: {
      context{{path: string, deep?: boolean, filter?: RegExp}}: {
        keys{{}}: string[];
        <T>{{id: string}}: T;
      };
    };

    // First, initialize the Angular testing environment.
    getTestBed{{}}.initTestEnvironment{{
      BrowserDynamicTestingModule,
      platformBrowserDynamicTesting{{}}
    }};
    // Then we find all the tests.
    const context = require.context{{'./', true, /\.spec\.ts$/}};
    // And load the modules.
    context.keys{{}}.map{{context}};
  '${{name}}/src/polyfills.ts': |
    /**
      * This file includes polyfills needed by Angular and is loaded before the app.
      * You can add your own extra polyfills to this file.
      *
      * This file is divided into 2 sections:
      *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
      *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
      *      file.
      *
      * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
      * automatically update themselves. This includes Safari >= 10, Chrome >= 55 {{including Opera}},
      * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
      *
      * Learn more in https://angular.io/guide/browser-support
      */

      /***************************************************************************************************
      * BROWSER POLYFILLS
      */

      /** IE10 and IE11 requires the following for NgClass support on SVG elements */
      // import 'classlist.js';  // Run `npm install --save classlist.js`.

      /**
      * Web Animations `@angular/platform-browser/animations`
      * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
      * Standard animation support in Angular DOES NOT require any polyfills {{as of Angular 6.0}}.
      */
      // import 'web-animations-js';  // Run `npm install --save web-animations-js`.

      /**
      * By default, zone.js will patch all possible macroTask and DomEvents
      * user can disable parts of macroTask/DomEvents patch by setting following flags
      * because those flags need to be set before `zone.js` being loaded, and webpack
      * will put import in the top of bundle, so user need to create a separate file
      * in this directory {{for example: zone-flags.ts}}, and put the following flags
      * into that file, and then add the following code before importing zone.js.
      * import './zone-flags';
      *
      * The flags allowed in zone-flags.ts are listed here.
      *
      * The following flags will work for all browsers.
      *
      * {{window as any}}.__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
      * {{window as any}}.__Zone_disable_on_property = true; // disable patch onProperty such as onclick
      * {{window as any}}.__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
      *
      *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
      *  with the following flag, it will bypass `zone.js` patch for IE/Edge
      *
      *  {{window as any}}.__Zone_enable_cross_context_check = true;
      *
      */

      /***************************************************************************************************
      * Zone JS is required by default for Angular itself.
      */
      import 'zone.js/dist/zone';  // Included with Angular CLI.


      /***************************************************************************************************
      * APPLICATION IMPORTS
      */
  '${{name}}/src/main.ts': |
    import { enableProdMode } from '@angular/core';
    import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

    import { AppModule } from './app/app.module';
    import { environment } from './environments/environment';

    if {{environment.production}} {
      enableProdMode{{}};
    }

    platformBrowserDynamic{{}}.bootstrapModule{{AppModule}}
      .catch{{err => console.error{{err}}}};
  '${{name}}/src/index.html': |
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>TestProj</title>
      <base href="/">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link rel="icon" type="image/x-icon" href="favicon.ico">
    </head>
    <body>
      <app-root></app-root>
    </body>
    </html>
  '${{name}}/src/app/app.module.ts': |
    import { BrowserModule } from '@angular/platform-browser';
    import { NgModule } from '@angular/core';

    import { AppRoutingModule } from './app-routing.module';
    import { AppComponent } from './app.component';

    @NgModule{{{
      declarations: [
        AppComponent
      ],
      imports: [
        BrowserModule,
        AppRoutingModule
      ],
      providers: [],
      bootstrap: [AppComponent]
    }}}
    export class AppModule { }
  '${{name}}/src/app/app-routing.module.ts': |
    import { NgModule } from '@angular/core';
    import { Routes, RouterModule } from '@angular/router';


    const routes: Routes = [];

    @NgModule{{{
      imports: [RouterModule.forRoot{{routes}}],
      exports: [RouterModule]
    }}}
    export class AppRoutingModule { }
  '${{name}}/src/app/app.component.spec.ts': |
    import { TestBed, async } from '@angular/core/testing';
    import { RouterTestingModule } from '@angular/router/testing';
    import { AppComponent } from './app.component';

    describe{{'AppComponent', {{}} => {
      beforeEach{{async{{{{}} => {
        TestBed.configureTestingModule{{{
          imports: [
            RouterTestingModule
          ],
          declarations: [
            AppComponent
          ],
        }}}.compileComponents{{}};
      }}}}};

      it{{'should create the app', {{}} => {
        const fixture = TestBed.createComponent{{AppComponent}};
        const app = fixture.componentInstance;
        expect{{app}}.toBeTruthy{{}};
      }}};

      it{{`should have as title 'testProj'`, {{}} => {
        const fixture = TestBed.createComponent{{AppComponent}};
        const app = fixture.componentInstance;
        expect{{app.title}}.toEqual{{'testProj'}};
      }}};

      it{{'should render title', {{}} => {
        const fixture = TestBed.createComponent{{AppComponent}};
        fixture.detectChanges{{}};
        const compiled = fixture.nativeElement;
        expect{{compiled.querySelector{{'.content span'}}.textContent}}.toContain{{'testProj app is running!'}};
      }}};
    }}};
  '${{name}}/src/app/app.component.ts': |
    import { Component } from '@angular/core';

    @Component{{{
      selector: 'app-root',
      templateUrl: './app.component.html',
      styleUrls: ['./app.component.scss']
    }}}
    export class AppComponent {
      title = 'testProj';
    }
  '${{name}}/src/environments/environment.prod.ts': |
    export const environment = {
      production: true
    };
  '${{name}}/src/environments/environment.ts': |
    // This file can be replaced during build by using the `fileReplacements` array.
    // `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
    // The list of file replacements can be found in `angular.json`.

    export const environment = {
      production: false
    };

    /*
    * For easier debugging in development mode, you can import the following file
    * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
    *
    * This import should be commented out in production mode because it will have a negative impact
    * on performance if an error is thrown.
    */
    // import 'zone.js/dist/zone-error';  // Included with Angular CLI.
  '${{name}}/e2e/src/app.e2e-spec.ts': |
    import { AppPage } from './app.po';
    import { browser, logging } from 'protractor';

    describe{{'workspace-project App', {{}} => {
      let page: AppPage;

      beforeEach{{{{}} => {
        page = new AppPage{{}};
      }}};

      it{{'should display welcome message', {{}} => {
        page.navigateTo{{}};
        expect{{page.getTitleText{{}}}}.toEqual{{'testProj app is running!'}};
      }}};

      afterEach{{async {{}} => {
        // Assert that there are no errors emitted from the browser
        const logs = await browser.manage{{}}.logs{{}}.get{{logging.Type.BROWSER}};
        expect{{logs}}.not.toContain{{jasmine.objectContaining{{{
          level: logging.Level.SEVERE,
        } as logging.Entry}}}};
      }}};
    }}};
  '${{name}}/e2e/src/app.po.ts': |
    import { browser, by, element } from 'protractor';

    export class AppPage {
      navigateTo{{}}: Promise<unknown> {
        return browser.get{{browser.baseUrl}} as Promise<unknown>;
      }

      getTitleText{{}}: Promise<string> {
        return element{{by.css{{'app-root .content span'}}}}.getText{{}} as Promise<string>;
      }
    }
  '${{name}}/e2e/protractor.conf.js': |
    // @ts-check
    // Protractor configuration file, see link for more information
    // https://github.com/angular/protractor/blob/master/lib/config.ts

    const { SpecReporter } = require{{'jasmine-spec-reporter'}};

    /**
    * @type { import{{"protractor"}}.Config }
    */
    exports.config = {
      allScriptsTimeout: 11000,
      specs: [
        './src/**/*.e2e-spec.ts'
      ],
      capabilities: {
        browserName: 'chrome'
      },
      directConnect: true,
      baseUrl: 'http://localhost:4200/',
      framework: 'jasmine',
      jasmineNodeOpts: {
        showColors: true,
        defaultTimeoutInterval: 30000,
        print: function{{}} {}
      },
      onPrepare{{}} {
        require{{'ts-node'}}.register{{{
          project: require{{'path'}}.join{{__dirname, './tsconfig.json'}}
        }}};
        jasmine.getEnv{{}}.addReporter{{new SpecReporter{{{ spec: { displayStacktrace: true } }}}}};
      }
    };
  '${{name}}/e2e/tsconfig.json': |
      {
        "extends": "../tsconfig.json",
        "compilerOptions": {
          "outDir": "../out-tsc/e2e",
          "module": "commonjs",
          "target": "es5",
          "types": [
            "jasmine",
            "jasminewd2",
            "node"
          ]
        }
      }
  '${{name}}/install.sh': |
      npm init -y 
      #required modules
      npm install @angular/core 
      npm install @angular/router 
      npm install @angular/platform-browser 
      npm install @angular/platform-browser-dynamic 
      npm install @angular/animations 
      npm install @angular/common 
      npm install @angular/compiler 
      npm install @angular/forms 

      npm install rxjs 
      npm install tslib 
      npm install zone.js 
      #dev modules
      
      npm install @angular-devkit/build-angular --save-dev 
      npm install @angular/cli --save-dev 
      npm install @angular/compiler-cli --save-dev 
      npm install @angular/language-service --save-dev 

      npm install @types/node --save-dev 
      npm install @types/jasmine --save-dev 
      npm install @types/jasminewd2 --save-dev 
      
      npm install codelyzer --save-dev 
      npm install jasmine-core --save-dev 
      npm install jasmine-spec-reporter --save-dev 

      npm install karma --save-dev
      npm install karma-chrome-launcher --save-dev
      npm install karma-coverage-istanbul-reporter --save-dev
      npm install karma-jasmine --save-dev
      npm install karma-jasmine-html-reporter --save-dev

      npm install ts-node --save-dev
      npm install tslint --save-dev
      npm install tslint --save-dev

      npm install protractor --save-dev